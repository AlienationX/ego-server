"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
from datetime import timedelta 

# import mysqlclient
# mysqlclient如果安装不上，就使用pymysql
import pymysql
pymysql.install_as_MySQLdb()

from collections import ChainMap
from decouple import Config, RepositoryEnv
import os

# 读取环境变量，没有设置时，默认使用prod环境。本机设置为dev：export DJANGO_ENV=dev
# vim ~/.bash_profile
# export DJANGO_ENV=dev
ENV = os.getenv('DJANGO_ENV', 'prod')  
config = Config(ChainMap(RepositoryEnv(f".env.{ENV}"), RepositoryEnv(".env.base")))

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'rest_framework_simplejwt',                  # jwt用户认证
    'rest_framework_simplejwt.token_blacklist',  # jwt黑名单功能，必须添加此行，同时需要 makemigrations 和 migrate，生成2张token_blacklist相关表
    'corsheaders',             # 处理跨域
    # 'drf_yasg',
    # 'drf_spectacular',         # 接口文档 swagger
    # 'drf_spectacular_sidecar', # 接口文档 swagger-ui

    'pokemon_library',  # 注册图鉴应用
    'pokemon_wallpaper',  #  注册壁纸应用
    'wallpaper.apps.WallpaperConfig',  # 写成config样式，admin页面才会显示
    'polls.apps.PollsConfig',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 跨域配置，必须放在最前

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'server.middleware.request_middleware.RequestLoggingMiddleware',  # 自定义中间件，需要获取request.user, 所以需要放到auth中间件之后
]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'HOST': config('DB_HOST'),
        'PORT': config('DB_PORT'),
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'OPTIONS': {'charset': 'utf8mb4'}  # 支持 Emoji 和复杂字符
    },
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# 默认UTC
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# django的静态文件是统一管理，都会收集放到static路径下，所以没应用的static需要再增加应用名称来隔离，重点。
# pokemon_library应用的图片访问地址是 http://127.0.0.1:8000/static/pokemon_library/images/0001-妙蛙种子.png
# pokemon_wallpaper应用的图片访问地址是 http://127.0.0.1:8000/static/pokemon_wallpaper/images/WechatIMG34.jpg
# 新版本无需添加STATICFILES_DIRS
# STATICFILES_DIRS = [
#     Path(BASE_DIR).joinpath('pokemon_library/static'),  # 指定静态文件目录
#     Path(BASE_DIR).joinpath('pokemon_wallpaper/static'),  # 指定静态文件目录
# ]

# 
STATIC_ROOT = Path(BASE_DIR).joinpath('static')

# 以上直接访问即可，不需要配置urls。通过配置urls可以映射到应用的地址上
# http://127.0.0.1:8000/static/pokemon_library/images/0001-妙蛙种子.png 映射到 http://127.0.0.1:8000/pokemon_library/static/images/0001-妙蛙种子.png


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ######################## 自定义没有权限自动跳转到该url
LOGIN_URL = '/pokemon_wallpaper/login/'

# ######################## rest_framework 配置
REST_FRAMEWORK = {
    # 'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    # 认证是有一种认证通过即可，没有一种通过否则报401错误
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',  # 可选其他认证方式（如Token 和 Session认证）
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',  # Basic 认证（可选）​​敏感信息隔离​​：Basic 认证仅限测试环境使用，生产环境推荐使用 JWT。
    ],
    # 权限是必须所有权限都通过才可以，否则报403错误
    'DEFAULT_PERMISSION_CLASSES': [
        'wallpaper.permissions.HasAccessKey',  # 所以接口必须增加Access-Key并进行验证
        # 'rest_framework.permissions.IsAuthenticated'  # 默认需要认证
    ],
    # 限流相关配置
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',  # 匿名用户
        'rest_framework.throttling.UserRateThrottle'   # 认证用户
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '30/minute',   # 匿名用户每分钟30次请求
        'user': '100/minute'   # 认证用户没分钟100次请求
    }
}

# ######################## jwt 用户认证配置

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),   # 访问令牌有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),      # 刷新令牌有效期
    'ROTATE_REFRESH_TOKENS': True,                    # 刷新时生成新 refresh token
    'BLACKLIST_AFTER_ROTATION': True,                 # 刷新后废弃旧 refresh token
    'UPDATE_LAST_LOGIN': True,                       # 登录时是否更新最后登录时间
    'ALGORITHM': 'HS256',                             # 加密算法
    'SIGNING_KEY': SECRET_KEY,                        # 签名密钥（从 settings 中获取）
    'AUTH_HEADER_TYPES': ('Bearer',),                 # 请求头格式（默认 Bearer）
}

# ######################## drf-spectacular 配置

SPECTACULAR_SETTINGS = {
    'TITLE': 'Wallpaper API',
    'DESCRIPTION': 'Your project description',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    # OTHER SETTINGS
    'SWAGGER_UI_DIST': 'SIDECAR',  # shorthand to use the sidecar instead
    'SWAGGER_UI_FAVICON_HREF': 'SIDECAR',
    'REDOC_DIST': 'SIDECAR',
}

# ######################## 跨域配置

# 该配置是django的配置，默认是空，主要是控制postman这种请求，生产环境也需要设置成前端和测试访问。跨域是控制前端浏览器的请求
ALLOWED_HOSTS = ["*"]

CORS_ALLOW_ALL_ORIGINS = True
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:5173",  # 前端开发服务器地址
#     # "http://127.0.0.1:3000",
#     "https://your-production-domain.com"  # 生产环境域名
# ]

# 允许携带 Cookie（如果需要）
CORS_ALLOW_CREDENTIALS = True

# 允许添加任意请求头
# CORS_ALLOW_HEADERS = ['*']
# 允许的请求头（按需添加）
CORS_ALLOW_HEADERS = [
    # 'accept',
    # 'accept-encoding',
    # 'authorization',
    # 'content-type',
    # 'dnt',
    # 'origin',
    # 'user-agent',
    # 'x-csrftoken',
    # 'x-requested-with',
    
    'access-key',
    'token'
]

# ######################## 日志配置

# # 创建日志路径
# Path(f"{BASE_DIR}/logs").mkdir(parents=True, exist_ok=True)
# # 日志相关配置
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     # 日志格式
#     'formatters': {
#         'verbose': {
#             'format': '{asctime} {levelname} [{module}] {message}',
#             'style': '{',
#         },
#         'request_format': {
#             'format': '{asctime} {message}',
#             'style': '{',
#         },
#     },
#     # 处理器（控制台、文件等）
#     'handlers': {
#         'console': {
#             'level': 'INFO',
#             'class': 'logging.StreamHandler',
#             'formatter': 'verbose'
#         },
#         'file': {
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': 'logs/django.log',  # 日志文件路径
#             'maxBytes': 1024 * 1024 * 5,   # 文件大小限制（5MB）
#             'backupCount': 5,              # 保留日志文件数
#             'formatter': 'verbose',
#         },
#         'mail_admins': {
#             'level': 'ERROR',
#             'class': 'django.utils.log.AdminEmailHandler',
#             'include_html': True,
#         },
#         # StreamHandler：输出到控制台。
#         # RotatingFileHandler：按文件大小轮转日志文件。
#         # TimedRotatingFileHandler：按时间轮转日志文件。
#         # AdminEmailHandler：发送错误邮件给管理员（需配置 ADMINS）。
#         'request_file': {
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': 'logs/request.log',  # 日志文件路径
#             'maxBytes': 1024 * 1024 * 5,   # 文件大小限制（5MB）
#             'backupCount': 5,              # 保留日志文件数
#             'formatter': 'request_format',
#         },
#         'wallpaper_file': {
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': 'logs/wallpaper.log',  # 日志文件路径
#             'maxBytes': 1024 * 1024 * 5,   # 文件大小限制（5MB）
#             'backupCount': 5,              # 保留日志文件数
#             'formatter': 'verbose',
#         },
#     },
#     # 日志记录器（定义不同模块的日志行为）
#     'loggers': {
#         '': {  
#             # 根记录器，捕获所有日志。
#             'handlers': ['console', 'file', 'request_file'],
#             'level': 'INFO',
#         },
#         'django': {
#             # 处理django的默认日志，比如"GET /wallpaper/api/classify/?select=true HTTP/1.1" 200 2555
#             # 只用来打印和写入file文件
#             'handlers': ['console', 'file'],
#             'level': 'INFO',
#             'propagate': False,  # 是否传递给父记录器
#         },
#         'wallpaper': {
#             # wallpaper应用的日志
#             'handlers': ['console', 'wallpaper_file', 'mail_admins'],
#             'level': 'INFO',
#             'propagate': False,  # 是否传递给父记录器
#         },
#     },
# }

# 云函数不能用文件记录日志
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    # 日志格式
    'formatters': {
        'verbose': {
            'format': '{asctime} {levelname} [{module}:{lineno}] {message}',
            'style': '{',
        }
    },
    # 处理器（控制台、文件等）
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose'
        }
    },
    # 日志记录器（定义不同模块的日志行为）
    'loggers': {
        '': {  
            # 根记录器，捕获所有日志。
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}